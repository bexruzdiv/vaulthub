---

- name: install pre-requisites
  pip:
    name:
      - openshift
      - pyyaml
      - kubernetes 

- name: Get role token from Vault
  community.hashi_vault.vault_login:
    url: "{{ external_bankvault_address }}"
    auth_method: approle
    mount_point: "approle"
    role_id: "{{ ansible_hashi_vault_role_id }}"
    secret_id: "{{ ansible_hashi_vault_secret_id }}" 
  register: __login_data
  
- name: Retrieve kubeconfig from Vault and write to a user-writable location
  block:
    - name: Retrieve kubeconfig from Vault
      shell: vault kv get -field=value {{ vault_injector_kubeconfig_vault_path }}
      environment:
        VAULT_ADDR: "{{ vault_injector_address }}"
        VAULT_TOKEN: "{{ vault_injector_token }}"
      register: __kubeconfig_json

- name: Convert JSON to YAML and save to a variable
  set_fact:
    _kubeconfig_content: "{{ __kubeconfig_json.stdout | from_json | to_nice_yaml }}"

- name: Ensure .kube directory exists
  file:
    path: "/root/.kube"
    state: directory
    mode: '0755'

- name: Save kubeconfig to /root/.kube/config
  copy:
    content: "{{ _kubeconfig_content }}"
    dest: "/root/.kube/config"
    mode: '0600'

- name: creator secret
  vault_create_secret:
    name: secret
    secret_type: "kv-v2"
    vault_address: "{{ vault_injector_address }}"
    vault_token: "{{ vault_injector_token }}"

- name: Add a repository
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: https://helm.releases.hashicorp.com


- name: Install Helm chart if release doesn't exist
  community.kubernetes.helm:
    release_name: vault
    chart_ref: hashicorp/vault
    chart_version: 0.26.1
    release_namespace: vault
    create_namespace: true
    release_values:
      injector:
        enabled: "true"
        externalVaultAddr: "{{ vault_injector_address }}"


- name: Create Kubernetes Secret
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: vault-token-g955r
        annotations:
          kubernetes.io/service-account.name: vault
      type: kubernetes.io/service-account-token
    namespace: vault

#! looooooooooooop
- name: Create namespace
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ item.vault_injector_namespace }}"
  loop: "{{ vault_injector_loop }}"

#! looooooooooooop
- name: Create service account
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: vault-auth
        namespace: "{{ item.vault_injector_namespace }}"
  loop: "{{ vault_injector_loop }}"

- name: Enable and configure the auth method
  vault_enable_auth:
    k8s_auth_name: kubernetes-"{{ vault_injector_project }}"
    auth_method: "kubernetes"
    vault_address: "{{ vault_injector_address }}"
    vault_token: "{{ vault_injector_token }}"

# ! ENVIRONMENT SET 
- name: Get token from Kubernetes secret
  ansible.builtin.shell:
    cmd: "kubectl get -n vault secret vault-token-g955r --output='go-template={{ '{{' }} .data.token {{ '}}' }}' | base64 --decode"
  register: __vault_injector_token_output

- name: Get Kubernetes CA certificate
  ansible.builtin.shell:
    cmd: "kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode"
  register: __vault_injector_cert_output

- name: Get Kubernetes host
  ansible.builtin.shell:
    cmd: "kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.server}'"
  register: __vault_injector_kube_host_output


- name: Write Vault authentication configuration
  vault_write_auth_config:
    k8s_auth_name: kubernetes-"{{ vault_injector_project }}"

    token_reviewer_jwt: "{{ __vault_injector_token_output.stdout }}"
    kubernetes_host: "{{ __vault_injector_kube_host_output.stdout }}"
    kubernetes_ca_cert: "{{ __vault_injector_cert_output.stdout }}"
    issuer: "https://kubernetes.default.svc.cluster.local"
    vault_address: "{{ vault_injector_address }}"
    vault_token: "{{ vault_injector_token }}"

#! looooooooooooop
# ! policy 
- name: Write Vault policy
  vault_write_policy:
    name: "{{ item.vault_injector_role_name }}-policy"
    path: "secret/data/{{ item.vault_injector_secret_path }}/*"
    vault_address: "{{ vault_injector_address }}"
    vault_token: "{{ vault_injector_token }}"
    permission: 
      - read
  loop: "{{ vault_injector_loop }}"

#! looooooooooooop
- name: Write Vault role configuration
  vault_write_auth_role:
    k8s_auth_name: kubernetes-"{{ vault_injector_project }}"
    role_name: "{{ item.vault_injector_role_name }}"
    policies: "{{ item.vault_injector_role_name }}-policy"
    service_account_names: "vault-auth"
    service_account_namespaces: "{{ item.vault_injector_namespace }}"
    ttl: "24h"
    vault_address: "{{ vault_injector_address }}"
    vault_token: "{{ vault_injector_token }}"
  loop: "{{ vault_injector_loop }}"

#! loop
- name: Put data to secret
  vault_put_secret:
    vault_address: "{{ vault_injector_address }}"
    vault_token: "{{ vault_injector_token }}"
    secret_path: "secret/{{ item.vault_injector_secret_path }}/test-secret"
    data:
      - key: "name"
        value: "delete-it"
  loop: "{{ vault_injector_loop }}"


